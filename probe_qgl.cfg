########################################
# Probing & Levelling & Homing
########################################

[probe]
##  Euclid Probe bed mount
pin: ebb:PB5
x_offset: 0
y_offset: 35 #25
z_offset: 0
speed: 8
lift_speed: 30
samples: 3
samples_result: median
sample_retract_dist: 3
samples_tolerance: 0.0075
samples_tolerance_retries: 10


#####################################################################
#  Disable Heater while probing
#####################################################################
#[homing_heaters]
#steppers: stepper_z, stepper_z1, stepper_z2, stepper_z3
#heaters: extruder

#####################################################################
#  Gantry Adjustment Routines
#####################################################################
[quad_gantry_level]
##  Use QUAD_GANTRY_LEVEL to level a gantry.
##  Min & Max gantry corners - measure from nozzle at MIN (0,0) and 
##  MAX (350,350) to respective belt positions

#--------------------------------------------------------------------
##  Gantry Corners for 350mm Build
##  Uncomment for 350mm build
#gantry_corners:
#   -60,-10
#   410,420
##  Probe points
#points:
#   50,25
#   50,275
#   300,275
#   300,25

##  Min & Max gantry corners - measure from nozzle to respective belt positions
gantry_corners:
    -245, -156.75
    245, 280.75
##  Probe points; this are nozzle positions: we need to substract the probe offset
points:
    -140, -170
    -140, 110
    140, 110
    140, -170
#    -140, -140
#    -140, 140
#    140, 140
#    140, -140
#    -125, -166
#    -125, 84
#    125, 84
#    125, -166

speed: 200
horizontal_move_z: 20 ; MagProbe 20, Vinda or Omron 5
retries: 10
retry_tolerance: 0.0075
max_adjust: 15

[safe_z_home]
#home_xy_position: 0, 0
#home_xy_position: 0, -25
home_xy_position: -56, 182 
#home_xy_position: 0, 0 
speed: 100
z_hop: 10 # Move up 10mm, so the probe doesnt hit anything 
z_hop_speed: 30


#####################################################################
# Euclid Probe
#####################################################################

[gcode_macro _EuclidProbe]
description: config vars for Euclid probe deploy/stow

## Replace the cordinates to suit your printer for deployment steps
variable_position_preflight: [ 0, 0, 14 ]        # positions for probe to have clear path to dock 
variable_position_side:      [ 30, 0, 0 ]        # position for probe near dock to swipe on 
variable_position_dock:      [ -106, 184, -1]    # dock position
## exit/re-entry staging
variable_position_undock:    [    0, 0, 1 ]      # undock safety distance
variable_position_exit:      [   -10, 0, 0 ]     # exit position
variable_batch_mode_enabled: False
variable_probe_state: None

gcode:
    RESPOND TYPE=command MSG="{ printer['gcode_macro _EuclidProbe'] }"

[gcode_macro ATTACH_PROBE]
gcode: 
    {% set euclid_probe = printer["gcode_macro _EuclidProbe"] %}
    {% if euclid_probe.probe_state != "deployed" %}
        {% set z_actual = printer.toolhead.position.z %}
        _ASSERT_PROBE_STOWED             ; ensure the probe is currently stowed; can't deploy what isn't stowed.
        SAVE_GCODE_STATE NAME=STATE_ATTACH_PROBE
        SET_GCODE_OFFSET Z=0.0           ; reset the G-Code Z offset (adjust Z offset if needed)
        {% if z_actual < (euclid_probe.position_dock[2] + 20) %}
            G1 Z{euclid_probe.position_dock[2] + 20}
        {% endif %}
        G1 X{euclid_probe.position_dock[0] + euclid_probe.position_preflight[0]} Y{euclid_probe.position_dock[1] + euclid_probe.position_preflight[1]} Z{euclid_probe.position_dock[2] + euclid_probe.position_preflight[2]} F12000
        G1 Z{euclid_probe.position_dock[2]} F3000
        G1 Z{euclid_probe.position_dock[2] + euclid_probe.position_preflight[2]} F12000
        G1 X{euclid_probe.position_dock[0] + euclid_probe.position_side[0]} F12000
        G1 Z{z_actual}
        RESTORE_GCODE_STATE NAME=STATE_ATTACH_PROBE
    {% endif %}
    _ASSERT_PROBE_DEPLOYED           ; ensure the probe is currently deployed; can't stow what isn't deployed.
    
[gcode_macro DETACH_PROBE]
gcode: 
    {% set euclid_probe = printer["gcode_macro _EuclidProbe"] %}
    {% set z_actual = printer.toolhead.position.z %}
    _ASSERT_PROBE_DEPLOYED           ; ensure the probe is currently deployed; can't stow what isn't deployed.
    SAVE_GCODE_STATE NAME=STATE_ATTACH_PROBE
    SET_GCODE_OFFSET Z=0.0           ; reset the G-Code Z offset (adjust Z offset if needed)
    {% if z_actual < (euclid_probe.position_dock[2] + 20) %}
      G1 Z{euclid_probe.position_dock[2] + 20}
    {% endif %}
    G1 X{euclid_probe.position_dock[0] + euclid_probe.position_preflight[0]} Y{euclid_probe.position_dock[1] + euclid_probe.position_preflight[1]} Z{euclid_probe.position_dock[2] + euclid_probe.position_preflight[2]} F12000
    G1 Z{euclid_probe.position_dock[2] + euclid_probe.position_undock[2]} F3000
    G1 X{euclid_probe.position_dock[0] + euclid_probe.position_side[0]} F3000
    G1 Z{euclid_probe.position_dock[2] + euclid_probe.position_preflight[2]} F12000
    G1 Z{z_actual}
    #G1 X{euclid_probe.position_dock[0] + euclid_probe.position_side[0]} Y{euclid_probe.position_dock[1] + euclid_probe.position_side[1]}  F12000
    #G1 Z{euclid_probe.position_dock[2] + euclid_probe.position_side[2] }
    #G1 X{euclid_probe.position_dock[0]} F3000
    #G1 X{euclid_probe.position_dock[0] + euclid_probe.position_exit[0]} Y{euclid_probe.position_dock[1] + euclid_probe.position_exit[1]} Z{euclid_probe.position_dock[2] + euclid_probe.position_exit[2]} F3000
    #G1 Z{z_actual}
    RESTORE_GCODE_STATE NAME=STATE_ATTACH_PROBE
    _ASSERT_PROBE_STOWED             ; ensure the probe is currently stowed; can't deploy what isn't stowed.
    
#####################################################################
# Euclid Probe Safety Checks
#####################################################################
[gcode_macro _FORCE_DETACH_PROBE]
gcode: 
    M400
    G4 P250
    QUERY_PROBE
    _FORCE_DETACH_PROBE_ASSERT

[gcode_macro _FORCE_DETACH_PROBE_ASSERT]
gcode:
    {% set last_query_state = "stowed" if printer.probe.last_query == 1 else "deployed" %}
    {% if last_query_state == "deployed" %}          
          DETACH_PROBE                 ; safety measure
          CANCEL_PRINT
    {% endif %}

[gcode_macro _ASSERT_PROBE_STATE]
description: ensures probe is in a known state; QUERY_PROBE must have been called before this macro!
gcode:
    ## QUERY_PROBE manually-verified results, when microswitch not depressed
    ## "TRIGGERED" -> 1 :: probe stowed
    ## "open"      -> 0 :: probe deployed
    {% set last_query_state = "stowed" if printer.probe.last_query == 1 else "deployed" %}

    {% if params.MUST_BE != last_query_state %}
        { action_raise_error("expected probe state to be {} but is {} ({})".format(params.MUST_BE, last_query_state, printer.probe.last_query)) }
        BASE_CANCEL_PRINT ; cancel on ongoing print
    {% else %}
        ## all good; update state
        SET_GCODE_VARIABLE MACRO=_EuclidProbe VARIABLE=probe_state VALUE="'{ last_query_state }'"
    {% endif %}

[gcode_macro _ASSERT_PROBE_DEPLOYED]
description: error if probe not deployed
gcode:
    ; wait for moves to finish, then pause 0.25s for detection
    M400
    G4 P250
    QUERY_PROBE
    _ASSERT_PROBE_STATE MUST_BE=deployed

[gcode_macro _ASSERT_PROBE_STOWED]
description: error if probe not stowed
gcode:
    ; wait for moves to finish, then pause 0.25s for detection
    M400
    G4 P250
    QUERY_PROBE
    _ASSERT_PROBE_STATE MUST_BE=stowed

#####################################################################
# Euclid Probe Accuracy
#####################################################################
[gcode_macro PROBE_CENTER]
gcode:
    {% set z_actual = printer.toolhead.position.z %}
    {% set pspeed = 1 %}
    {% if z_actual < 20 %}
        G1 Z{z_actual + 20}
    {% endif %}
    #ATTACH_PROBE
    BED_CENTER
    PROBE_ACCURACY SAMPLES=20 PROBE_SPEED={pspeed}
    PROBE_ACCURACY SAMPLES=20 PROBE_SPEED={pspeed}
    PROBE_ACCURACY SAMPLES=20 PROBE_SPEED={pspeed}
    PROBE_ACCURACY SAMPLES=20 PROBE_SPEED={pspeed}
    PROBE_ACCURACY SAMPLES=20 PROBE_SPEED={pspeed}
    PROBE_ACCURACY SAMPLES=20 PROBE_SPEED={pspeed}
    PROBE_ACCURACY SAMPLES=20 PROBE_SPEED={pspeed}
    PROBE_ACCURACY SAMPLES=20 PROBE_SPEED={pspeed}
    PROBE_ACCURACY SAMPLES=20 PROBE_SPEED={pspeed}
    PROBE_ACCURACY SAMPLES=20 PROBE_SPEED={pspeed}
    #DETACH_PROBE

#####################################################################
# Euclid Dock Wear
#####################################################################
[gcode_macro PROBE_DOCKWEAR]
gcode:
    {% set euclid_probe = printer["gcode_macro _EuclidProbe"] %}
    {% set offset = [-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1] %}
    {% set z_actual = printer.toolhead.position.z %}

    SAVE_GCODE_STATE NAME=STATE_TEST_DOCK
    SET_GCODE_OFFSET Z=0.0           ; reset the G-Code Z offset (adjust Z offset if needed)
    G1 Z{z_actual}
      {%for sequence in range(1, 20) %}
          {% set cox = offset[range(11)|random] %}
          {% set coy = offset[range(11)|random] %}
          {action_respond_info("X_offset %s" % cox)}
          {action_respond_info("Y_offset %s" % coy)}
          ## ATTACH_PROBE
          G1 X{euclid_probe.position_dock[0] + euclid_probe.position_preflight[0] + cox} Y{euclid_probe.position_dock[1] + euclid_probe.position_preflight[1] + coy} Z{euclid_probe.position_dock[2] + euclid_probe.position_preflight[2]} F12000
          G1 Z{euclid_probe.position_dock[2]} F3000
          G1 Z{euclid_probe.position_dock[2] + euclid_probe.position_preflight[2]} F12000
          G1 X{euclid_probe.position_dock[0] + euclid_probe.position_side[0] + cox} F12000
          #DETACH_PROBE
          G1 X{euclid_probe.position_dock[0] + euclid_probe.position_preflight[0] + cox} Y{euclid_probe.position_dock[1] + euclid_probe.position_preflight[1] + coy} Z{euclid_probe.position_dock[2] + euclid_probe.position_preflight[2]} F12000
          G1 Z{euclid_probe.position_dock[2] + euclid_probe.position_undock[2]} F3000
          G1 X{euclid_probe.position_dock[0] + euclid_probe.position_side[0]+ cox} F3000
          G1 Z{euclid_probe.position_dock[2] + euclid_probe.position_preflight[2]} F12000
          G1 Z{z_actual}
      {% endfor %}
    RESTORE_GCODE_STATE NAME=STATE_TEST_DOCK