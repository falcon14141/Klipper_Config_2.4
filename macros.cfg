#####################################################################
#   Macros
#####################################################################


[gcode_macro DEV]
variable_enable_purge:              True
gcode:
   # {% set power = action_call_remote_method("device_power.get_device", device="Alim 24V") %}
   # {action_respond_info("Power is %s" % power)}
   #{action_respond_info("Z_Offset  is %s" % printer.gcode_move.homing_origin.z)}
      SAVE_GCODE_STATE NAME=STATE_DEV
      {% set wipe_count = 10 %}
      {% for wipe in range(wipe_count) %}
          {action_respond_info("Random direction is %s"  % (range(3) | random))}
      {% endfor %}
      RESTORE_GCODE_STATE NAME=STATE_DEV


[gcode_macro SAFE_CALIBRATE_Z]
gcode:
    {% set extruder_target = printer[printer.toolhead.extruder].target %}
    SET_GCODE_OFFSET Z=0.0                                                    ; reset the G-Code Z offset (adjust Z offset if needed)
    STATUS_CALIBRATING_Z                                                      ; change Neopixels status indicator
    CLEAN_HOTCOLD                                                             ; start a hot to cold cleaning
    CALIBRATE_Z { rawparams }                                                 ; calibrate Z
    PARK Z=-1                                                                 ; park toolhead at same height
    STATUS_HEATING                                                            ; change Neopixels status indicator
    M109 S{extruder_target}                                                   ; restore target temperature
    STATUS_READY                                                              ; change Neopixels status indicator


[gcode_macro T0]
gcode: ACTIVATE_EXTRUDER EXTRUDER=extruder

[gcode_macro T1]
gcode: ACTIVATE_EXTRUDER EXTRUDER=extruder1


## Macro QUAD_GANTRY_LEVEL ovverride
[gcode_macro QUAD_GANTRY_LEVEL]
description: Conform a moving, twistable gantry to the shape of a stationary bed
rename_existing: QUAD_GANTRY_LEVEL_BASE
gcode:
    {% set no_z_home = params.NZH|default(0)|int %}
    {action_respond_info("Gantry calibration")}
    BED_MESH_CLEAR
    STATUS_HOMING                   ; change Neopixels status indicator
    G28 
    {% if printer.quad_gantry_level.applied == false or (params.OPT is defined and params.OPT != "LAZY") %}
      ATTACH_PROBE                  ; undock klicky probe
      STATUS_LEVELING               ; change Neopixels status indicator     
      QUAD_GANTRY_LEVEL_BASE
      {% if no_z_home != 1 %}
          G28 Z                     ; Homing Z
      {% endif %}
      DETACH_PROBE                  ; dock klicky probe
    {% endif %} 
    PARK Z=-1                       ; park toolhead at same height
    STATUS_READY                    ; change Neopixels status indicator


## G32: Probe Z and calculate Z plane
[gcode_macro G32]
gcode:
    QUAD_GANTRY_LEVEL { rawparams }


[gcode_macro PRINT_CONFIG]
gcode:
    {% set MATERIAL = params.MATERIAL|default("N/A")|string %}                                         ; material
    {% set SOAK = params.SOAK|default(-1)|int %}                                                       ; heat soak time (minutes)
    {% set EXTRUDER = params.EXTRUDER|default(-1)|int %}                                               ; active extruder
    {% set BED_TEMP = params.BED_TEMP|default(-1)|float %}                                             ; bed temp
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(-1)|float %}                                   ; extruder temp
    {% set CHAMBER_TEMP = params.CHAMBER|default(-1)|float %}                                          ; chamber_temp
    {% set FAN_SPEED = params.FAN_SPEED|default(-1)|float %}                                           ; fan speed  
    {% set SIZE = params.SIZE|default("N/A")|string %}                                                 ; adaptative mesh

    ### Verify data and update print_start variables if required
    {% if MATERIAL != "N/A" %}
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=ps_material VALUE="'{MATERIAL}'"
    {% endif %}
    {% if SOAK > -1 %}
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=ps_soak VALUE={SOAK}
    {% endif %}
    {% if EXTRUDER > -1 %}
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=ps_extruder VALUE={EXTRUDER}
    {% endif %}
    {% if BED_TEMP > -1 %}
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=ps_temp_bed VALUE={BED_TEMP}
    {% endif %}
    {% if EXTRUDER_TEMP > -1 %}
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=ps_temp_extruder VALUE={EXTRUDER_TEMP}
    {% endif %}
    {% if CHAMBER_TEMP > -1 %}
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=ps_temp_chamber VALUE={CHAMBER_TEMP}
    {% endif %}
    {% if FAN_SPEED > -1 %}
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=ps_fan_speed VALUE={FAN_SPEED}
    {% endif %}
    {% if SIZE != "N/A" %}
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=ps_fl_size VALUE="'{SIZE}'"
    {% endif %}

[gcode_macro PRINT_START]
variable_print_pending:      False              ; specifies if a print job is pending
variable_ps_manual:          False              ; allow some manual overrides of the default print_start behavior
variable_ps_material:        "N/A"              ; printing material 
variable_ps_soak:            5                  ; heat soak time in minutes
variable_ps_extruder:        0                  ; extruder used for 1st layer
variable_ps_temp_extruder:   0                  ; extruder temp
variable_ps_temp_bed:        0                  ; bed temp
variable_ps_temp_chamber:    0                  ; bed temp
variable_ps_fan_speed:       0                  ; fan speed
variable_ps_fl_size:         "0_0_0_0"          ; adaptative mesh
gcode:

##### set defaults #####    
    {% set temp_min = printer.configfile.settings.extruder.min_extrude_temp + 4 %}                         ; recover config minimum extrude temp
##### print start ######
    G21                              ; set units to millimeters
    M83                              ; use relative extrusion distances
    #_POWER_ON
    UPDATE_DELAYED_GCODE ID=_PRINT_END_DELAYED DURATION=0 ; Cancel print_end
    #UPDATE_DELAYED_GCODE ID=_POWER_OFF DURATION=0 ; Clear any ongoing print-ends 
    STATUS_BUSY                      ; change Neopixels status indicator
    T{ps_extruder}                   ; change extruder
    STATUS_HEATING                   ; change Neopixels status indicator
    M104 S{temp_min}                 ; start nozzle preheat up until minimum extrude temp
    M190 S{ps_temp_bed}              ; start bed preheat
    G90                              ; absolute positioning
    G92 E0                           ; set extruder 0
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=print_pending VALUE=True
    BASE_PAUSE
    {action_respond_info("Entering heat soak for %s minutes. NO_SOAK to override"   % ps_soak)}
    {% if ps_manual == False and ps_soak > 0  %}
        UPDATE_DELAYED_GCODE ID=_PRINT_START_DELAYED DURATION={ps_soak*60}        ; Heatsoak
    {% else %}
        UPDATE_DELAYED_GCODE ID=_PRINT_START_DELAYED DURATION=1
    {% endif %}


[delayed_gcode _PRINT_START_DELAYED]
gcode: 
    {% set ps = printer["gcode_macro PRINT_START"] %}
    {% if ps.print_pending == True %}
    BASE_RESUME
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=print_pending VALUE=False
      {% if ps.ps_manual == False %}
          BED_MESH_CLEAR               ; clear mesh
          COMPUTE_MESH_PARAMETERS SIZE={ps.ps_fl_size}
          {% set mesh_center = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_center %}
          QUAD_GANTRY_LEVEL            ; home and adjust z plane
          PARK Z=-1                    ; park noozle in same Z plane
      {% endif %}
      STATUS_HEATING                   ; change Neopixels status indicator
      M104 S{ps.ps_temp_extruder}      ; preheat extruder
      M190 S{ps.ps_temp_bed}           ; wait for bed to reach temperature
      {% if ps.ps_manual == False %}
          ;CLEAN_NOPURGE               ; clean the nozzle
          ;STATUS_CALIBRATING_Z        ; change Neopixels status indicator
          ;CALIBRATE_Z                 ; automatic Z offset calibration
          ADAPTIVE_BED_MESH
          {% set euclid_probe = printer["gcode_macro _EuclidProbe"] %}
          M104 S{ps.ps_temp_extruder}  ; preheat extruder
          M109 S{ps.ps_temp_extruder}  ; wait for extruder to reach temperature
          SAFE_CALIBRATE_Z             ; automatic Z offset calibration
          ;SAFE_CALIBRATE_Z BED_POSITION={mesh_center[0],mesh_center[1]}            ; automatic Z offset calibration
      {% endif %}
      M109 S{ps.ps_temp_extruder}      ; wait for extruder to reach temperature
      {% if ps.ps_manual == False %}
          STATUS_CLEANING                  ; change Neopixels status indicator    
          CLEAN_PRIME                      ; prime & clean the nozzle
      {% endif %}
      M106 S{ps.ps_fan_speed*256/100}  ; set fan speed
      STATUS_PRINTING                  ; change Neopixels status indicator
   {% endif %}
   
[gcode_macro PRINT_START_AUTO]
gcode: 
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=ps_manual VALUE=False
    {action_respond_info("PRINT_START override inactif")}

[gcode_macro PRINT_START_MANUAL]
gcode: 
    {% set Z_OFFSET = params.Z|default(-0.50)|float %}                    ; edit to your default Z_offset
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=ps_manual VALUE=True
    SET_GCODE_OFFSET Z=0.0  
    SET_GCODE_OFFSET Z_ADJUST={Z_OFFSET} MOVE=1
    {action_respond_info("PRINT_START override actif")}

[gcode_macro NO_SOAK]
gcode: 
    PRINT_CONFIG SOAK=0
    UPDATE_DELAYED_GCODE ID=_PRINT_START_DELAYED DURATION=1

[gcode_macro BED_CENTER]
gcode: 
    G1 X0 Y0 F12000



[gcode_macro MAINTENANCE]
gcode: 
    G1 X0 Y-170 Z100 F12000



[gcode_macro PRINT_END]
gcode:
    {% set ps = printer["gcode_macro PRINT_START"] %}
    {% set z_safe = [printer.toolhead.position.z + 2, printer.toolhead.axis_maximum.z - 20]|min %}
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    M400                             ; wait for buffer to clear
    TURN_OFF_HEATERS
    G90                              ; absolute positioning
    G1 Z{z_safe} F3000               ; raise nozzle by z_safe mm
    M107                             ; turn off fan
    ;PARK                           ; park nozzle with gantry at max Z for easy part removal
    PARK Z=-1                        ; park nozzle with gantry at same layer
    tip_shaping                      ; Nozzle tip shaping
    {% if ps.ps_manual == False %}
        CLEAN_NOPURGE
    {% endif %}
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    #UPDATE_DELAYED_GCODE ID=_POWER_OFF DURATION=300 ; 5min timeout at print end if the user want's to quickly restart a new print
    UPDATE_DELAYED_GCODE ID=_PRINT_END_DELAYED DURATION=300 ; 5min timeout at print end if the user want's to quickly restart a new print
    STATUS_READY                     ; change Neopixels status indicator
    PRINT_CONFIG SOAK=0              ; remove heat soak on on retry



[delayed_gcode _PRINT_END_DELAYED]
gcode:
    M84                              ; disable steppers
    STATUS_OFF                       ; change Neopixels status indicator
    BED_MESH_CLEAR
    PRINT_CONFIG SOAK=5              ; redo heat soak on next print




### Go to Parking position
[gcode_macro PARK]
gcode:
    ##### set defaults #####
    {% set x = params.X|default(printer.toolhead.axis_maximum.x - 20) %}       ; edit to your park position
    {% set y = params.Y|default(printer.toolhead.axis_maximum.y - 0.5) %}      ; edit to your park position
    {% set z = params.Z|default(printer.toolhead.axis_maximum.z - 60)|float %} ; edit to your park position
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z - 20|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=STATE_PARK   
    STATUS_BUSY                      ; change Neopixels status indicator
    {% if z == -1 %}                 ; park in current plane : no gantry lift, no retraction
        G90                          ; absolute positonning
        G1 X{x} Y{y} F12000          ; move to parking position
    {% else %}
        {% set temp_current = printer[printer.toolhead.extruder].temperature %}     ; recover current extruder temp
        {% set temp_min = printer.configfile.settings.extruder.min_extrude_temp %}  ; recover config minimum extrude temp
        {% if temp_current >= temp_min %}
            G10                      ; retract
        {% endif%}
        G90                          ; relative positioning
        G1 X{x} Y{y} F12000          ; move to parking position
        G91                          ; relative positioning
        G1 Z{z_safe}                 ; raise gantry
    {% endif %}
    STATUS_READY                     ; change Neopixels status indicator
    RESTORE_GCODE_STATE NAME=STATE_PARK


[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SAVE_GCODE_STATE NAME=STATE_CANCEL   
    G91 
    G1 Z50
    RESTORE_GCODE_STATE NAME=STATE_CANCEL
    PARK Z=-1
    TURN_OFF_HEATERS
    tip_shaping                      ; Nozzle tip shaping
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_CONFIG SOAK=0              ; remove heat soak on on retry
    BASE_CANCEL_PRINT

[gcode_macro tip_shaping]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
	SAVE_GCODE_STATE NAME=tip_shaping
	# Filament tip shaping sequence
	M83 ;Relative extrusion
	G92 E0
	G1 E2 F3600
	G1 E-2 F3600
	G1 E3 F3600
	G1 E-3 F3600
	G1 E4 F3600
	G1 E-4 F3600
	G1 E-20 F3600                   ; Retract past heatbreak	
	RESTORE_GCODE_STATE name=tip_shaping

[gcode_macro tip_shaping_Reverse]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
	SAVE_GCODE_STATE NAME=tip_shaping
	# Filament tip shaping sequence
	M83 ;Relative extrusion
	G92 E0
	G1 E-2 F3600
	G1 E2 F3600
	G1 E-3 F3600
	G1 E3 F3600
	G1 E-4 F3600
	G1 E4 F3600
	G1 E-20 F3600                   ; Retract past heatbreak	
	RESTORE_GCODE_STATE name=tip_shaping

[pause_resume]

[display_status]

[gcode_macro M600]
gcode:
    PAUSE


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    SAVE_GCODE_STATE NAME=STATE_PAUSE
    BASE_PAUSE
    PARK Z=-1


[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    ##### set defaults #####
    ##### resume print
    G11                               ; un-retract filament
    RESTORE_GCODE_STATE NAME=STATE_PAUSE MOVE=1
    BASE_RESUME
    STATUS_PRINTING                   ; change Neopixels status indicator 
